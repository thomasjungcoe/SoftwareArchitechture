While the stack is good to see the bigger picture of how everything works together, the map is a little bit more detailed.

Stage 1: Clean Code
==========================================================================================================================
    The very first step towards creating long-lasting software is figuring out how to write 'clean code'.
    
    Clean code is code that is easy to understand and change. At the low-level, this manifests in a few design choices:
        * being consistent
        * preferring meaningful variable, method and class name over writing comments
        * ensuring code is indented and spaced properly
        * writing pure functions with no side effects
        * not passing null


Stage 2: Programming Paradigms
==========================================================================================================================
    3 major programming paradigms and way they influence how we write code:
        * Object-Oriented Programming is the tool best suited for defining how we cross architectural boundaries with 
            polymorphism and plugins.
        * Functional programming is the tool we use to push data to the boundaries of our application.
        * and Structured programming is the tool we use to write algorithm.
    
    This implies that effective software uses a hybrid all 3 of programming paradigms styles at different times.
        
    Functional programming resources:  
        * https://mostly-adequate.gitbook.io/mostly-adequate-guide/
        * https://pragprog.com/search/?q=d
            - https://pragprog.com/titles/swdddf/domain-modeling-made-functional/



Stage 3: Object-Oriented Programming
==========================================================================================================================
    It's important to know how each of the paradigms work and how they urge you to structure the code within them, but
        with respect to architecture, OOP is the clear tool for the job.

    Not only does OOP enables us to create a plugin architecture and build flexibility into our projects;
    
    OOP comes with the 4 principles of OOP (encapsulation, inheritance, polymorphism, and abstraction) that helps us 
        create "rich domain models".

    Most developers learning Object-Oriented Programming never get to this part: 
        learning how to create a software implementation of the problem domain, 
        and locating it in the center of a layered web app.

    Functional programming can seem like the means to all ends in this scenario, but I'd recommend getting acquainted with 
        model-driven design and Domain-Driven Design to understand the bigger picture on how object-modelers are able to 
        encapsulate an entire business in a zero-dependency domain model.
            * https://khalilstemmler.com/articles/domain-driven-design-intro/


    Why is that a huge deal?
        It's huge bc if you can create a mental-model of a business, 
            you can create a software implementation of that business.

    
Stage 4: Design Principles
==========================================================================================================================
    OOP is very useful for encapsulating rich domain models and solving the 3rd type of "Hard Software Problems"
        "Hard Software Problems"
            1.) The Performant System Problem
                ex.) Twitter
                    What it does is simple, but it is serving requests from more than 500 million users.
                    The hard problem that Twitter solves is actually a performance problem. When the challenge is performance,
                        Whether we use a strictly typed language or not is less important.
            
            2.) The Embedded System Problem 
                An embedded system is a combination of computer hardware and software, with the purpose of enabling control 
                    over the mechanical or electrical aspect of a system.
                
                Most systems we use today are built on a very complex layer of code that, if not initially written in, 
                    compiles down to C or C++ usually.
                    
                C is precedural and not OOP so it is more challenging to keep clean.
                C++ does make life a whole lot better bc it has obj orientation, but the challenge is still fundementally 
                    interacting with lower-level hardware details.
                
            3.) The Complex Domain Problem
                For some problems, that challenge is less about scaling in terms of handling more requests, but scaling in 
                    terms of the codebase's size.

                Enterprice companies have complex real-life problems to be solved.
                    * Being able to logically (via domains) separate parts of that monolith into smaller apps. 
                        And then, physically (via microservices for bounded contexts) split them up so that teams can be 
                        assigned to maintain them.
                    * Handling integration and synchronization between these apps.
                    * Modeling the domain concepts and actually solving the problems of the domain.
                    * Creating a ubiquitous (all encompassing) language to be shared by devs and domain experts
                    * Not getting lost in the mass amount of code written and slowing down to the point where it becomes 
                        impossible to add new features without beraking existing ones.


    But OOP can introduce some design challenges:
        * When should I use composition?
        * When should I use inheritance?
        * When should I use an abstract class?

    Design principles are really well-established and battle-tested object-oriented best practices that you use as railguards.
        * Composition over inheritance
        * Encapsulate what varies
        * Program against abstractions, not concretions.
        * The hollywood principle: "Don't call us, we will call you"
        * The 'SOLID' principles, especially the 'Single responsibility principle'
            - 'SOLID' principles
                SOLID principles teach us how we can structure our functions and classes in order to be as robust,
                    maintainable, and flexible as possible.
                1.) S: Single Responsibility Principles
                2.) O: Open-Closed Principle 
                3.) L: Liskov-Substitution Principles 
                4.) I: Interface Segregation Principles 
                5.) D: Dependency Inversion Principles

            Benefits:
                * Write code that's testable
                * write code that's easily understood
                * write code where things are where they are expected to be 
                * write code where classes narrowly do what they are intended to do 
                * write code that are adjusted and extended quickly
                * above but w/o bugs
                * write code that separate the policy (rule) from the details (implementation)
                * write code that allows for implementations to be swapped out (think swapping out
                    Email APIs, ORMs or web server frameworks)

        * DRY (DO Not Repeat Yourself)
        * 'YAGNI (You Aren't Gonna Need It)'
            - YAGNI is a design principle from Extreme Programming (XP) that states a programmer shouldn't 
                add any 'functionality until it's actually necessary'
                - keep it simple?
                - quicker to advance
                - helps prevent design fatique or fear of a large all emcompassing up-front design

            BUT!
                YAGNI is design to be combined with 'continous refactoring', automated until testing and 
                    continous integration.
                Failure to refactor code early could require huge amount of tech debt and rework.
                Therefore, for this to work well:
                    * write code that are testable
                    * run automated tests

    Make sure to come to your own conclusions, though. 
    Don't just follow what someone else says you should do. 
    Make sure that it makes sense to you.


Stage 5: Design Patterns
==========================================================================================================================
    There are three categories of design patterns: creational, structural, and behavioral
    * Creational Pattern are patterns that control how objects are created.
        - The 'Singleton pattern' for ensuring only a single instance of class can exist 
        - The 'Abstract Factory Pattern' for creating an instances of several families of classes 
        - 'The Prototype Pattern' for starting out with an instance that is cloned from an existing one.
    
    * Structural Pattern are patterns that simplify how we define relationships betwen components
        - 'The Adapter Pattern', for creating an interface to enable classes that normally can't work together, 
            to work together
        - 'The Bridge Pattern', for splitting a class that should actually be one or more, into a set of classes 
            that belong to a hierarchy, enabling the implementations to be developed indepently from each other.
        - 'The Decorator Pattern', for adding responsibilities to objects dynamically.
    
    * 'Behavioral Pattern' are common patterns for facilitating elegant communication between objects.
        - 'The Template pattern', for deferring the example steps of an algorithm to a subclass
        - 'The Mediator pattern', for defining the exact communication channels to allowed between classes 
        - 'The Observer pattern', for enabling classes to subscribe to something of interest, and to be notified
            when a change occurred.

    Design pattern criticism
        Although they can be great, but sometimes they add additional complexity to our design.
        It is important to remember YAGNI and attempt to keep out design as simple as possible.
        Only use Design Pattern when you're really sure you need them.

        * architectural patterns are just design patterns blown-up in scale to the high-level, 
            where design patterns are low-level implementations (closer to classes and functions). 

    
Stage 6: Architectural Principles
==========================================================================================================================
    Now we're at a higher level of thinking beyond the class level.

    We now understand that the decisions we make towards organizing and building relationships between 
        components at high-level and the low-level, will have a significant impact on the maintainability,
        flexibility, and testability of our projects.

    * 'Component design principles': 
        The Stable Abstraction Principle, The Stable Dependency Principle, and 
        Acyclic Dependency principle, for how to organize components, their dependencies, when to couple
        them, and the implications of accidentally creating dependency cycles and relying on unstable component
            
            The Stable Abstraction Principle (SAP): The more stable a component is, the more abstract it 
                should be. 
                If a component is more stable, it's likely it's going to be serving more purposes for more 
                    groups of people, and for different problems.
                In order to prevent a component from becoming too specific or rigid, 
                    we should primarily use abstract classes.
                Abstract class work well for defining high-level policy and leaving room for various room
                     for the low-level details.
            
            The Stable Dependency Principle (SDP): Component dependencies should be in the direction of stability
                
                * infra layer -> app layer -> domain layer
                
                Every system has stable componenets and volatile compoenents


    * Policy vs Detail,
        for understanding how to separate the rules of your application from the implementation details.
    
    * Boundaries, and how to identify the subdomains that the features of your appoication belongs within.


Stage 7: Architectural Styles
==========================================================================================================================
Architecture is about the stuff that matters.

It's about identifying what a system needs in order to be successful, and then stacking the odds of success 
    by choosing the architecture that best fits the requirements.

    ex.) 
    a system that has a lot of 'business logic complexity' would benefit from using a 'layered architecture' 
        to encapsulate that complexity.

    a system like Uber needs to be able to handle lots of 'real-time events' at once and update drivers' 
        location so 'publish-subscribe style' architecture might be most effective.

    The 3 categories of arch. styles are similiar to the 3 categories of design patterns bc 
        architectural styles are design patterns at the high-level.

    Structrual
        Projects with varying level of components and wide-range functionality will either benefit or suffer 
            from adopting a structural architecture.
        ex.)
            'Component-based archt.' emphasize separation of concerns between the individual component within 
                a system.
                * Google with their different apps: Google Docs, Google Drive, Google Maps, etc.
                For platforms with lots of functionality, component based architectures divide the concerns 
                    into loosely coupled independent component. (horizontal separation)
            
            'Monolithic' means that the application is combined into a single platform or program, deployed 
                all together.
                Note: you can have both component based and monolithic if you separate your application 
                    properly, yet deploy it all as one piece.
            
            'Layered' archt. separate concerns vertically by cutting software into infrastructure, application, 
                and domain layer.
                ex.) infrastrcuture layer -> adapter layer -> app layer -> domain layer.
                Infrastructure details -- controllers, routes, databses, caches, ORMs
                Adapter Logic          -- responsible for access to infra. and external APIs
                App Logic              -- Use cases / Application services the features of our application.
                Core Domain Logic      -- Entities, Value Object, Domain Event.
            
    Messaging
        Depending on your proj, messaging might be a really important component to the success of the system.
            Message-based architectures build on top of functional programming principle and behavioral 
            design patterns like the observer pattern.

        ex.) 
            Event-Driven archt. view all significant changes to state as events.
                - 

            Publish-subscribe archt. builds on top of the Observer design pattern by making its primary
                communication method between the system itself, end users/clients, and other systems and components.  

    Distributed        
        A distributed arch simply means that the component of the system is deployed separately and operate 
            by commounicating over network protocol.
        Distributed systems can be very effective for scaling throughput, scaling team, and delegating 
            (potentially expensive tasks or) responsibility to other components.

            * Client-server arch     
                one of the most common distributed system, where we divide the work to be done between
                client (presentation) and the server (business logic)
            * Peer-to-peer arch
                distribute application-layer taks between equally-priviledged participants, forming
                peer-to-peer network. 


Stage 8: Architectural Patterns
==========================================================================================================================
Architectural Patterns explain in greater tactical detail how to actually implement one of those architectural styles.
* 'Domain-Driven Design' is an approach to software development against really complex problem domains. For DDD to be most sucessful,
    We need to implement a 'layered architecture' in order to separate the concerns of a domain model from the finfrastructral details 
    that makes the application actually run, like databases, webservers, caches, etc.

* Model-View Controller is probably the most well-known architectural pattern for developing user interface-based applications. It 
    works by dividing the app into 3 components: model, view, and controller. MVC is incredibly useful when you're first starting out,
    and it helps you piggyback towards other architectures, but there hit's a point when we realize MVC isn't enough for problmes with 
    lots of business logic 

* Event sourcing is a functional approach where we store only the transactions, and never the state. If we ever need the state, 
    we can apply all the transactions from the beginning of time.


Stage 9: Enterprise Patterns
==========================================================================================================================
Any architectureal pattern you choose will introduce a nubmer of constructs and technical jargon to familairize yourself with and 
    decide on whether it's worth the effort to use or not.

    ex.)
        In MVC, the "view" holds all the presentation layer code, the "controller" is traslates commands and queries from the "view" 
            into requests that are handled by the model and returned by the "controller".
        
        Where in the Model (M) do we handle these things?
        * validation logic
        * invariant rules
        * domain events 
        * use cases 
        * complex queries 
        * and business logic 

        If we simply use an ORM (object-relational mapper) like Sequelize or TypeORM as the "model", all that important stuff to gets left 
            to interpretation on where it should go, and it finds itself in some unspecific layer between (what should be a rich) model and 
            the controller.

            View -> Controller -> ?? --> Model 
        
        For each of those things that MVC fails to address, there exist other enterprise patterns to solve them.
        ex.)
            * Entities describe models that have an identity 
            * Value Obj are models that have no identity, and can be used in order to encapsulate validation logic. 
            * Domain Events are events that signify some relevant business event occurring, and can be subscribed to from other components.

    Integration patterns
        Once your app is up and runninng, as you get more and more users, you might run into performance issues. In order to solve these problems, 
            you might read about integrating things like message queues or caches in order to improve performance.

        This is probably the most challengeing stuff: scaling, audits, and performance.

        Designing a system for "scale" can be incredibly challenging. It requires a deep understanding of the limitations of each component 
            within the archtecture, and a plan of action for how to mitigate stress on your architecture and continue to serve requests in 
            high-traffic situations.
        
        The need to "audit" what's going on in your app. Large enterprise companies need to be able to perform audits in order to identify 
            potential security issues, understand how users are using their applications and have a log of evertying that's ever happened.
        
        This can be challegning to implement, but common architectures end up looking event-based and build upon a wide range of software and system 
            design concepts, principles, and practices like Event Storming, DDD, CQRS (command query response segregation), and Event Sourcing. 



